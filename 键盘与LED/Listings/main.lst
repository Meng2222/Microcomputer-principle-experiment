C51 COMPILER V9.56.0.0   MAIN                                                              10/09/2017 20:04:37 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "HD7279.h"
   2          #include "delay.h"
   3          #include "main.h"
   4          #include "89C51_it.h"
   5          
   6          #ifndef DATA_MEMORY_TEST
   7          
   8          #include "basicIO.h"
   9          #include "decode.h"
  10          #include "p1IO.h"
  11          #include "timer.h"
  12          
  13          #endif
  14          
  15          #ifdef DATA_MEMORY_TEST
              
              #include "dataMemory.h"
              
              #endif
  20          
  21          //数码管显示状态枚举变量
  22          typedef enum
  23          {
  24                  rollingLeft,
  25                  rollingRight,
  26                  showKeyNumTogether,
  27                  inputRoll2Left,
  28                  idle
  29          }ledStatus_t;
  30          
  31          //程序运行状态枚举变量
  32          typedef enum
  33          {
  34                  keyLed,
  35                  basicIO,
  36                  decode,
  37                  p1IO,
  38                  dataMemory,
  39                  timerExp,
  40                  interruptExp,
  41                  statusIdle
  42          }status_t;
  43          
  44          //P1IO输出状态枚举变量
  45          typedef enum
  46          {
  47                  blinkIn4,
  48                  flow,
  49                  showInput,
  50                  p1Idle
  51          }p1IOStatus_t;
  52          
  53          typedef enum
  54          {
C51 COMPILER V9.56.0.0   MAIN                                                              10/09/2017 20:04:37 PAGE 2   

  55                  timerExp1,
  56                  timerExp2,
  57                  timerExp3       
  58          }timerStatus_t;
  59          
  60          typedef enum
  61          {
  62                  itExp1,
  63                  itExp2,
  64                  itExp3
  65          }itStatus_t;
  66          
  67          unsigned char LedItStatus = 0;
  68          
  69          void main(void)
  70          {
  71   1      #ifndef DATA_MEMORY_TEST
  72   1      //数码管滚动显示的周期
  73   1      #define ROLL_PERIOD (15)
  74   1              ledStatus_t idata ledStatus = inputRoll2Left;
  75   1              status_t idata status = interruptExp;
  76   1              p1IOStatus_t idata p1IOStatus = flow;
  77   1              timerStatus_t idata timerStatus = timerExp3;
  78   1              itStatus_t idata itStatus = itExp1;
  79   1              unsigned char i,j = 0;
  80   1              //按键状态，没有按下时为0xff，按下时为按下按键的编号
  81   1              unsigned char keyState = 0;
  82   1              unsigned char rollPeriod = ROLL_PERIOD;
  83   1              //按键是否按下标志位
  84   1              unsigned char keyFlag = 0;
  85   1              //简单IO输入值
  86   1              unsigned char ioInput = 0;
  87   1              //译码实验输出用变量
  88   1              unsigned char ioOutput = 0;
  89   1              //译码实验闪烁计时变量
  90   1              unsigned short timeCounter = 0;
  91   1                                                              
  92   1              unsigned char triggerFlag = 0;
  93   1              
  94   1              unsigned short pulseWidth = 0;
  95   1              
  96   1              timeMode_t timeMode ={0};
  97   1              
  98   1              timeMode.isGateCrl = noGateCrl;
  99   1              timeMode.timeWorkMode = timer;
 100   1              timeMode.timeTriggerMode = innerTrigger;
 101   1              timeMode.timerMode = halfWordAutoReload;
 102   1              
 103   1              TimeInit(TIM0 , timeMode ,200, 3);
 104   1      
 105   1              timeMode.isGateCrl = noGateCrl;
 106   1              timeMode.timeWorkMode = counter;
 107   1              timeMode.timeTriggerMode = outerTrigger;
 108   1              timeMode.timerMode = byteAutoReload;    
 109   1              TimeInit(TIM1 , timeMode ,0, 3);
 110   1              TimerCmd(TIM1 , disable);
 111   1              TH1 = 0xfb;
 112   1              TL1 = 0xfb;
 113   1              TimerCmd(TIM1 ,enable);
 114   1              
 115   1              timeMode.isGateCrl = GateCrl;
 116   1              timeMode.timeWorkMode = timer;
C51 COMPILER V9.56.0.0   MAIN                                                              10/09/2017 20:04:37 PAGE 3   

 117   1              timeMode.timeTriggerMode = innerTrigger;
 118   1              timeMode.timerMode = halfWordNotReload; 
 119   1              TimeInit(TIM1 , timeMode ,65535, 1);
 120   1              TimerCmd(TIM1 , disable);
 121   1              
 122   1              IE = 0x81;
 123   1              IT0 = 1;
 124   1      
 125   1      //      //将HD7279对应引脚全部拉低
 126   1      //      P1 = 0x00;
 127   1              
 128   1      //      DelayMs(25);
 129   1              
 130   1      //      for(j = 0 ; j < 10 ; j++)
 131   1      //      {
 132   1      //      for(i = 0 ; i < 8 ; i++)
 133   1      //      {
 134   1      //              LedWrite(0x97 - i, realCode[8 - i]);
 135   1      //      }
 136   1      //      DelayMs(250);
 137   1      //      }
 138   1              while(1)
 139   1              {
 140   2                      DelayMs(20);
 141   2                      
 142   2                      switch(status)
 143   2                      {
 144   3                              //按键和LED
 145   3                              case keyLed:
 146   3                              {
 147   4                                      
 148   4                                      //读取按键状态
 149   4                                      keyState = KeyRead();
 150   4      
 151   4                                      switch(ledStatus)
 152   4                                      {
 153   5                                              //向左滚动
 154   5                                              case rollingLeft:
 155   5                                                      //没有按键按下时循环向左滚动
 156   5                                                      if(keyState==0xff)
 157   5                                                      {
 158   6                                                              rollPeriod--;
 159   6                                                              if(rollPeriod == 0)
 160   6                                                              {
 161   7                                                                      rollPeriod = ROLL_PERIOD;
 162   7                                                                      HD7279SendByte(RTL_CYCLE);
 163   7                                                              }
 164   6                                                      }
 165   5                                                      //按下KEY10后进入一同显示数字状态
 166   5                                                      else if(keyState == KEY10)
 167   5                                                      {
 168   6                                                              rollPeriod = ROLL_PERIOD;
 169   6                                                              HD7279SendByte(CMD_RESET);
 170   6                                                              ledStatus = showKeyNumTogether;
 171   6                                                      }
 172   5                                              break;
 173   5                                              //循环向右滚动
 174   5                                              case rollingRight:
 175   5                                                      //没有按键按下时循环向右滚动
 176   5                                                      if(keyState == 0xff)
 177   5                                                      {
 178   6                                                              rollPeriod--;
C51 COMPILER V9.56.0.0   MAIN                                                              10/09/2017 20:04:37 PAGE 4   

 179   6                                                              if(rollPeriod == 0)
 180   6                                                              {
 181   7                                                                      rollPeriod = ROLL_PERIOD;
 182   7                                                                      HD7279SendByte(RTR_CYCLE);
 183   7                                                              }
 184   6                                                      }
 185   5                                                      //按下KEY10时进入一同显示按下数字状态
 186   5                                                      else if(keyState == KEY10)
 187   5                                                      {
 188   6                                                              rollPeriod = ROLL_PERIOD;
 189   6                                                              HD7279SendByte(CMD_RESET);
 190   6                                                              ledStatus = showKeyNumTogether;                         
 191   6                                                      }
 192   5                                              break;
 193   5                                              //所有数码管一同显示按下按键对应数字
 194   5                                              case showKeyNumTogether:
 195   5                                                      switch(keyState)
 196   5                                                      {
 197   6                                                              case KEY0:
 198   6                                                                      for(i = 0 ; i < 8 ; i++)
 199   6                                                                      {
 200   7                                                                              LedWrite(0x97 - i, realCode[0]);
 201   7                                                                      }
 202   6                                                              break;
 203   6                                                              case KEY1:
 204   6                                                                      for(i = 0 ; i < 8 ; i++)
 205   6                                                                      {
 206   7                                                                              LedWrite(0x97 - i, realCode[1]);
 207   7                                                                      }
 208   6                                                              break;
 209   6                                                              case KEY2:
 210   6                                                                      for(i = 0 ; i < 8 ; i++)
 211   6                                                                      {
 212   7                                                                              LedWrite(0x97 - i, realCode[2]);
 213   7                                                                      }
 214   6                                                              break;
 215   6                                                              case KEY3:
 216   6                                                                      for(i = 0 ; i < 8 ; i++)
 217   6                                                                      {
 218   7                                                                              LedWrite(0x97 - i, realCode[3]);
 219   7                                                                      }
 220   6                                                              break;
 221   6                                                              case KEY4:
 222   6                                                                      for(i = 0 ; i < 8 ; i++)
 223   6                                                                      {
 224   7                                                                              LedWrite(0x97 - i, realCode[4]);
 225   7                                                                      }                                       
 226   6                                                              break;
 227   6                                                              case KEY5:
 228   6                                                                      for(i = 0 ; i < 8 ; i++)
 229   6                                                                      {
 230   7                                                                              LedWrite(0x97 - i, realCode[5]);
 231   7                                                                      }                                       
 232   6                                                              break;
 233   6                                                              case KEY6:
 234   6                                                                      for(i = 0 ; i < 8 ; i++)
 235   6                                                                      {
 236   7                                                                              LedWrite(0x97 - i, realCode[6]);
 237   7                                                                      }                                       
 238   6                                                              break;
 239   6                                                              case KEY7:
 240   6                                                                      for(i = 0 ; i < 8 ; i++)
C51 COMPILER V9.56.0.0   MAIN                                                              10/09/2017 20:04:37 PAGE 5   

 241   6                                                                      {
 242   7                                                                              LedWrite(0x97 - i, realCode[7]);
 243   7                                                                      }                                       
 244   6                                                              break;
 245   6                                                              case KEY8:
 246   6                                                                      for(i = 0 ; i < 8 ; i++)
 247   6                                                                      {
 248   7                                                                              LedWrite(0x97 - i, realCode[8]);
 249   7                                                                      }                                       
 250   6                                                              break;
 251   6                                                              case KEY9:
 252   6                                                                      for(i = 0 ; i < 8 ; i++)
 253   6                                                                      {
 254   7                                                                              LedWrite(0x97 - i, realCode[9]);
 255   7                                                                      }                                       
 256   6                                                              break;
 257   6                                                              default:
 258   6                                                              break;
 259   6                                                      }       
 260   5                                              break;
 261   5                                                      //每次按键时不循环左移并显示按键对应的数字
 262   5                                              case inputRoll2Left:
 263   5                                                      if(keyState!=0xff&&keyFlag==0)
 264   5                                                      {
 265   6                                                              HD7279SendByte(RTL_UNCYL);
 266   6                                                              switch(keyState)
 267   6                                                              {
 268   7                                                                      case KEY0:
 269   7                                                                              LedWrite(LED1, realCode[0]);
 270   7                                                                      break;
 271   7                                                                      case KEY1:
 272   7                                                                              LedWrite(LED1, realCode[1]);
 273   7                                                                      break;
 274   7                                                                      case KEY2:
 275   7                                                                              LedWrite(LED1, realCode[2]);
 276   7                                                                      break;
 277   7                                                                      case KEY3:
 278   7                                                                              LedWrite(LED1, realCode[3]);
 279   7                                                                      break;
 280   7                                                                      case KEY4:
 281   7                                                                              LedWrite(LED1, realCode[4]);
 282   7                                                                      break;
 283   7                                                                      case KEY5:
 284   7                                                                              LedWrite(LED1, realCode[5]);
 285   7                                                                      break;
 286   7                                                                      case KEY6:
 287   7                                                                              LedWrite(LED1, realCode[6]);
 288   7                                                                      break;
 289   7                                                                      case KEY7:
 290   7                                                                              LedWrite(LED1, realCode[7]);
 291   7                                                                      break;
 292   7                                                                      case KEY8:
 293   7                                                                              LedWrite(LED1, realCode[8]);
 294   7                                                                      break;
 295   7                                                                      case KEY9:
 296   7                                                                              LedWrite(LED1, realCode[9]);
 297   7                                                                      break;
 298   7                                                                      default:
 299   7                                                                      break;
 300   7                                                              }
 301   6                                                              keyFlag = 1;
 302   6                                                      }
C51 COMPILER V9.56.0.0   MAIN                                                              10/09/2017 20:04:37 PAGE 6   

 303   5                                                      if(keyState == 0xff&&keyFlag == 1)
 304   5                                                      {
 305   6                                                              keyFlag = 0;
 306   6                                                      }
 307   5                                                              
 308   5                                              break;
 309   5                                              //空闲状态
 310   5                                              case idle:
 311   5                                                      
 312   5                                              break;
 313   5                                              default:
 314   5                                              break;
 315   5                                      }
 316   4                              break;
 317   4                              }
 318   3                              //简单IO实验
 319   3                              case basicIO:
 320   3                              {       
 321   4                                      //从74LS245地址读取简单IO输入
 322   4                                      ioInput = chip245Adress;
 323   4                              
 324   4                                      //将简单IO输入输出到74LS374
 325   4                                      chip374Adress = ~ioInput;
 326   4                              
 327   4                                      //在数码管上显示简单IO输入状态
 328   4                                      for(i = 0 ; i < 8 ; i++)
 329   4                                      {
 330   5                                              if((ioInput>>i)&0x01)
 331   5                                              {
 332   6                                                      LedWrite(0x97 - 7 + i, realCode[1]);
 333   6                                              }
 334   5                                              else
 335   5                                              {
 336   6                                                      LedWrite(0x97 - 7 + i, realCode[0]);
 337   6                                              }
 338   5                                      }
 339   4                                      
 340   4                              break;
 341   4                              }
 342   3                              //译码器实验
 343   3                              case decode:
 344   3                              {
 345   4                                      timeCounter++;
 346   4                                      timeCounter%=20;
 347   4                                      if(timeCounter/10)
 348   4                                      {
 349   5                                              decodeAdress1 = ioOutput;
 350   5                                      }
 351   4                                      else
 352   4                                      {
 353   5                                              decodeAdress2 = ioOutput;
 354   5                                      }
 355   4                              
 356   4                              break;
 357   4                              }
 358   3                              //P1IO口实验
 359   3                              case p1IO:
 360   3                              {
 361   4                                      switch(p1IOStatus)
 362   4                                      {
 363   5                                              //四个一组循环闪烁
 364   5                                              case blinkIn4:
C51 COMPILER V9.56.0.0   MAIN                                                              10/09/2017 20:04:37 PAGE 7   

 365   5                                                      BlinkIn4(500);
 366   5                                              break;
 367   5                                              //流水灯
 368   5                                              case flow:
 369   5                                                      Flow(500);
 370   5                                              break;
 371   5                                              //将P10~P13输入输出到P14~P17，用输入控制LED的亮灭
 372   5                                              case showInput:
 373   5                                                      ShowInput();
 374   5                                              break;
 375   5                                              case p1Idle:
 376   5                                              break;
 377   5                                              default:
 378   5                                              break;
 379   5                                      }
 380   4                              break;
 381   4                              }
 382   3                              case dataMemory:
 383   3                                      
 384   3                              break;
 385   3                              case timerExp:
 386   3                              {
 387   4                                      switch(timerStatus)
 388   4                                      {
 389   5                                              case timerExp1:
 390   5                                                      if(TimerGetOverFlowITFlag(TIM0))
 391   5                                                      {
 392   6                                                              P10=!P10;
 393   6                                                              TimerClearOverFlowFlag(TIM0);
 394   6                                                      }
 395   5                                              break;
 396   5                                              case timerExp2:
 397   5                                                      {
 398   6                                                              if(TimerGetOverFlowITFlag(TIM1))
 399   6                                                              {
 400   7                                                                      P10=!P10;
 401   7                                                                      TimerClearOverFlowFlag(TIM1);
 402   7                                                              }                                                       
 403   6                                                      }
 404   5                                              break;
 405   5                                              case timerExp3:
 406   5                                              {
 407   6                                                      if(P33==1)
 408   6                                                      {
 409   7                                                              TimerCmd(TIM1 , disable);
 410   7                                                              if(triggerFlag==1)
 411   7                                                              {
 412   8                                                                      pulseWidth = ((TH1<<8)|TL1);
 413   8                                                                      LEDShowInt(pulseWidth);
 414   8                                                                      triggerFlag = 0;
 415   8                                                                      TH1=0;
 416   8                                                                      TL1=0;
 417   8                                                              }
 418   7                                                      }
 419   6                                                      else if(P33==0)
 420   6                                                      {
 421   7                                                              TimerCmd(TIM1 , enable);
 422   7                                                              triggerFlag = 1;
 423   7                                                      }
 424   6                                              }
 425   5                                              break;
 426   5                                      }
C51 COMPILER V9.56.0.0   MAIN                                                              10/09/2017 20:04:37 PAGE 8   

 427   4                              break;
 428   4                              }
 429   3                              case interruptExp:
 430   3                                      switch(itStatus)
 431   3                                      {
 432   4                                              case itExp1:
 433   4                                                      if(LedItStatus)
 434   4                                                      {
 435   5                                                              Flow(200);
 436   5                                                      }
 437   4                                                      else
 438   4                                                      {
 439   5                                                              BlinkIn4(300);
 440   5                                                      }
 441   4                                              break;
 442   4                                              case itExp2:
 443   4                                              break;
 444   4                                              case itExp3:
 445   4                                              break;
 446   4                                      }
 447   3                              break;
 448   3                              case statusIdle:
 449   3                              break;
 450   3                              default:
 451   3                              break;
 452   3                      }
 453   2      
 454   2              }
 455   1      #endif
 456   1      #ifdef DATA_MEMORY_TEST
                      unsigned char i = 0;
                      P1 = 0x00;
                      DelayMs(20);
                      while(1)
                      {
                              AUXR = 0x8e;
                              for(i = 0 ; i < DIRECT_ACCESS_SIZE;i++)
                              {
                                      directAccess[i] = i;
                                      LEDShowInt(directAccess[i]);
                                      DelayMs(300);
                              }
                              for(i = 0; i< BIT_ACCESS_SIZE ; i++)
                              {
                                      bitAccess[i] = 255 - i;
                                      LEDShowInt(bitAccess[i]);
                                      DelayMs(300);           
                              }
                              for(i = 0; i< INDIRECT_ACCESS_SIZE ; i++)
                              {
                                      indirectAccess[i] = 128 + i;
                                      LEDShowInt(indirectAccess[i]);
                                      DelayMs(300);           
                              }
                              for(i = 0; i< PAGE_ACCESS_SIZE ; i++)
                              {
                                      pageAccess[i] = i;
                                      LEDShowInt(pageAccess[i]);
                                      DelayMs(300);           
                              }
                              
                              for(i = 0; i< OUTER_MEM_IN_MCU_SIZE ; i++)
C51 COMPILER V9.56.0.0   MAIN                                                              10/09/2017 20:04:37 PAGE 9   

                              {
                                      outerMemInMCU[i] = i;
                                      LEDShowInt(outerMemInMCU[i]);
                                      DelayMs(300);           
                              }
              
                              AUXR = 0x02;
                              for(i = 0; i< OUTER_EXTEND_MEM_SIZE ; i++)
                              {
                                      outerExtendMem[i] = 128 - i;
                                      LEDShowInt(outerExtendMem[i]);
                                      DelayMs(300);           
                              }               
                      }               
              #endif
 504   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1153    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      16
   IDATA SIZE       =   ----       5
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
